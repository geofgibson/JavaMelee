/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.variableproductions.melee;

import java.awt.*;
import java.awt.print.*;
import static java.awt.print.Printable.*;
import java.beans.*;

/**
 *
 * @author geofgibson
 */
public class Melee extends javax.swing.JFrame {
        
    /**
     *
     */
    
    javax.swing.JFrame frameToPrint;
    /**
     * Creates new form Melee
     */
    public Melee() {
        initComponents();
        //listen for model changes to bound fields
        mLCharacter.addPropertyChangeListener(new MyPropertyChangeListener());
        //load data models for combo boxes
        for (MLArmourModifiers armourCounter : JavaMelee.myController.armourDatabase.armour) {
            armourSelect.addItem(armourCounter.name);
        }
        for (MLWeaponSpecs weaponCounter : JavaMelee.myController.weaponDatabase.weapons) {
            weaponTwoSelect.addItem(weaponCounter.name);
            weaponOneSelect.addItem(weaponCounter.name);
        }
        for (MLWeaponSpecs daggerCounter : JavaMelee.myController.weaponDatabase.daggers) {
            daggerSelect.addItem(daggerCounter.name);
        }
        this.setMenuBar(menuBar1);
        menu1.add("Print");
    }

    
     
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        mLCharacter = new com.variableproductions.melee.MLCharacter();
        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        strengthLock = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        strengthField = new javax.swing.JFormattedTextField();
        dexterityField = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        adjDexterityField = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        createButton = new javax.swing.JButton();
        dexterityLock = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        armourSelect = new javax.swing.JComboBox<String>();
        weaponOneSelect = new javax.swing.JComboBox<String>();
        weaponTwoSelect = new javax.swing.JComboBox<String>();
        daggerSelect = new javax.swing.JComboBox<String>();
        movementField = new javax.swing.JTextField();
        experienceField = new javax.swing.JTextField();
        posessionsPane = new javax.swing.JScrollPane();
        possessionsTextArea = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        menu1.setLabel("File");
        menu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printMenuActionPerformed(evt);
            }
        });
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Melee Character Card");
        setBounds(new java.awt.Rectangle(4, 16, 0, 0));
        setLocation(new java.awt.Point(200, 100));

        strengthLock.setText("Fixed");
        strengthLock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strengthLockActionPerformed(evt);
            }
        });

        strengthField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        strengthField.setOpaque(true);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, mLCharacter, org.jdesktop.beansbinding.ELProperty.create("${strength}"), strengthField, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        strengthField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strengthFieldActionPerformed(evt);
            }
        });

        dexterityField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dexterityField.setOpaque(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, mLCharacter, org.jdesktop.beansbinding.ELProperty.create("${dexterity}"), dexterityField, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        dexterityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dexterityFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Strength (ST):");

        jLabel3.setText("Dexterity (DX):");

        jLabel4.setText("Character Name:");

        nameField.setText("<New Character>");
        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        adjDexterityField.setEditable(false);
        adjDexterityField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        adjDexterityField.setOpaque(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, mLCharacter, org.jdesktop.beansbinding.ELProperty.create("${adjustedDX}"), adjDexterityField, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        adjDexterityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjDexterityFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Natural");

        jLabel6.setText("Adjusted");

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        dexterityLock.setText("Fixed");
        dexterityLock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dexterityLockActionPerformed(evt);
            }
        });

        jLabel7.setText("Movement Allowance (MA):");

        jLabel8.setText("Experience Points (EP):");

        jLabel9.setText("Armour:");

        jLabel10.setText("Weapon One:");

        jLabel11.setText("Weapon Two:");

        jLabel12.setText("Dagger:");

        armourSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                armourSelectActionPerformed(evt);
            }
        });

        weaponOneSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weaponOneSelectActionPerformed(evt);
            }
        });

        weaponTwoSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weaponTwoSelectActionPerformed(evt);
            }
        });

        daggerSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                daggerSelectActionPerformed(evt);
            }
        });

        movementField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, mLCharacter, org.jdesktop.beansbinding.ELProperty.create("${movementAllowance}"), movementField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        possessionsTextArea.setColumns(20);
        possessionsTextArea.setRows(5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, mLCharacter, org.jdesktop.beansbinding.ELProperty.create("${possessions}"), possessionsTextArea, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        posessionsPane.setViewportView(possessionsTextArea);

        jLabel13.setText("Posessions:");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Push button to");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("randomize ST and DX");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(layout.createSequentialGroup()
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(layout.createSequentialGroup()
                                    .add(jLabel2)
                                    .add(40, 40, 40))
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                    .add(jLabel4)
                                    .add(18, 18, 18)))
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(layout.createSequentialGroup()
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(jLabel5)
                                        .add(dexterityField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(18, 18, 18)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jLabel6)
                                        .add(layout.createSequentialGroup()
                                            .add(6, 6, 6)
                                            .add(adjDexterityField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(18, 18, 18)
                                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                                .add(strengthLock)
                                                .add(dexterityLock))))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(31, 31, 31))
                                .add(layout.createSequentialGroup()
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(nameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 188, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(layout.createSequentialGroup()
                                            .add(1, 1, 1)
                                            .add(strengthField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 47, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                    .add(290, 290, 290))))
                        .add(layout.createSequentialGroup()
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(layout.createSequentialGroup()
                                    .add(233, 233, 233)
                                    .add(jLabel1))
                                .add(layout.createSequentialGroup()
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jLabel3)
                                        .add(jLabel7))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(layout.createSequentialGroup()
                                            .add(experienceField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(jLabel13))
                                        .add(layout.createSequentialGroup()
                                            .add(movementField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(105, 105, 105)
                                            .add(createButton)))))
                            .add(101, 101, 101)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel12)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel10)
                                    .add(jLabel11))
                                .add(23, 23, 23)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(daggerSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 209, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(weaponTwoSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 209, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jLabel8)
                            .add(layout.createSequentialGroup()
                                .add(jLabel9)
                                .add(55, 55, 55)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(armourSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 209, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(weaponOneSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 209, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(posessionsPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 275, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(6, 6, 6))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(nameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(strengthField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(strengthLock))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(4, 4, 4)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel5)
                            .add(jLabel6))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(dexterityField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3)
                            .add(adjDexterityField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(dexterityLock))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel7)
                            .add(movementField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(2, 2, 2))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel14)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel15)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(createButton)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel8)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel13)
                        .add(experienceField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(armourSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel9))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel10)
                            .add(weaponOneSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel11)
                            .add(weaponTwoSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel12)
                            .add(daggerSelect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(posessionsPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(6, 6, 6)
                .add(jLabel1))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void strengthLockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strengthLockActionPerformed
        // TODO add your handling code here:
        JavaMelee.myController.toggleStFixed();
        if (strengthLock.isSelected()) {
            strengthLock.setSelected(false);
        }
        else {
            strengthLock.setSelected(true);
        }   
    }//GEN-LAST:event_strengthLockActionPerformed

    private void dexterityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dexterityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dexterityFieldActionPerformed

    private void strengthFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strengthFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_strengthFieldActionPerformed

    private void adjDexterityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjDexterityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adjDexterityFieldActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        // TODO add your handling code here:
        JavaMelee.myController.createCharacter();
        //reset combo boxes to index 0
        armourSelect.setSelectedIndex(0);
        weaponOneSelect.setSelectedIndex(0);
        weaponTwoSelect.setSelectedIndex(0);
        daggerSelect.setSelectedIndex(0);
        
    }//GEN-LAST:event_createButtonActionPerformed

    private void dexterityLockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dexterityLockActionPerformed
        // TODO add your handling code here:
         JavaMelee.myController.toggleDxFixed();
        if (dexterityLock.isSelected()) {
            dexterityLock.setSelected(false);
        }
        else {
            dexterityLock.setSelected(true);
        } 
    }//GEN-LAST:event_dexterityLockActionPerformed

    private void armourSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_armourSelectActionPerformed
        // TODO add your handling code here:
        if (armourSelect.getSelectedIndex() != -1) {
            JavaMelee.myController.selectArmour(armourSelect.getSelectedIndex());
        }
    }//GEN-LAST:event_armourSelectActionPerformed

    private void weaponOneSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponOneSelectActionPerformed
        // TODO add your handling code here:
        if (weaponOneSelect.getSelectedIndex() != -1) {
           JavaMelee.myController.selectWeapon1(weaponOneSelect.getSelectedIndex());
           weaponOneSelect.setSelectedItem(mLCharacter.weaponOne.name);
        }
    }//GEN-LAST:event_weaponOneSelectActionPerformed

    private void weaponTwoSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponTwoSelectActionPerformed
        // TODO add your handling code here:
        if (weaponTwoSelect.getSelectedIndex() != -1) {
           JavaMelee.myController.selectWeapon2(weaponTwoSelect.getSelectedIndex());
           weaponTwoSelect.setSelectedItem(mLCharacter.weaponTwo.name);
        }
    }//GEN-LAST:event_weaponTwoSelectActionPerformed

    private void daggerSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_daggerSelectActionPerformed
        // TODO add your handling code here:
        if (daggerSelect.getSelectedIndex() != -1) {
           JavaMelee.myController.selectDagger(daggerSelect.getSelectedIndex());
           daggerSelect.setSelectedItem(mLCharacter.currentDagger.name);
        }
    }//GEN-LAST:event_daggerSelectActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void printMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printMenuActionPerformed
        // TODO add your handling code here:
        switch (evt.getActionCommand()) {
            case "Print":
                frameToPrint = this;
                PrinterJob job = PrinterJob.getPrinterJob();
                job.setPrintable(new meleePrinter());
                boolean ok = job.printDialog();
                if (ok) {
                    try {
                        job.print();
                    } catch (PrinterException ex) {
                        /* The job did not successfully complete */
                    }
                }
                break;  
        }
    }//GEN-LAST:event_printMenuActionPerformed

    /**
     *
     */
    public class MyPropertyChangeListener implements PropertyChangeListener {
	// This method is called every time the property value is changed
        @Override
	public void propertyChange(PropertyChangeEvent evt) {
            if (evt.getPropertyName().isEmpty()) {
                return;
            }
            switch (evt.getPropertyName()) {
                case "strength":
                    //assuming strength changed, update view
                    strengthField.setValue(evt.getNewValue());
                    break;
                case "dexterity":
                    //assuming strength changed, update view
                    dexterityField.setValue(evt.getNewValue());
                    adjDexterityField.setValue(mLCharacter.adjustedDX);
                    break;
                case "possessions":
                    possessionsTextArea.setText((String) evt.getNewValue());
                    break;
            }
        }
    }
    
    /**
     *
     */
    public class meleePrinter implements Printable {
        @Override
        public int print(Graphics g, PageFormat pf, int page) throws PrinterException {
        System.out.println("print method");
        if (page > 0) {
            return NO_SUCH_PAGE;
        }
        Graphics2D g2d = (Graphics2D)g;
        g2d.translate(pf.getImageableX(), pf.getImageableY());
        // Print the entire visible contents of a
        // java.awt.Frame.
        frameToPrint.printAll(g);
        return PAGE_EXISTS;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField adjDexterityField;
    private javax.swing.JComboBox<String> armourSelect;
    private javax.swing.JButton createButton;
    private javax.swing.JComboBox<String> daggerSelect;
    private javax.swing.JFormattedTextField dexterityField;
    private javax.swing.JButton dexterityLock;
    private javax.swing.JTextField experienceField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public static com.variableproductions.melee.MLCharacter mLCharacter;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private javax.swing.JTextField movementField;
    private javax.swing.JTextField nameField;
    private javax.swing.JScrollPane posessionsPane;
    private javax.swing.JTextArea possessionsTextArea;
    private javax.swing.JFormattedTextField strengthField;
    private javax.swing.JButton strengthLock;
    private javax.swing.JComboBox<String> weaponOneSelect;
    private javax.swing.JComboBox<String> weaponTwoSelect;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
